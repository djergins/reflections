When would you want to use a remote repository rather than keeping all your work local?

Using a remote repository is great in multiple situations. It gives you a backup of your work in case something catastrophically unfortunate should happen to your pc. It also allows others to browse and pull your code so that they can work on it as well. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

There may be changes introduced in the remote repository that you do not desire in your local repository. Changes, that could break things or mess up what you are currently trying to do. If someone else has introduced changes on the repo, performing pulls manually gives you an opportunity to discuss the changes with the person that pushed them. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork: a clone of a remote repository on github.
clone: a copy of a github repository. A fork is also basically, a clone.
branch: a branch is another history of commits within a single repository, separate from branch master, although master is actually a branch itself, so really its just a singular line of commits. 

Fork makes copying remote repositories and pulling them down much easier in Github, also it makes suggesting changes to the original copy much easier.

cloning works well for pulling a copy of code locally and also making copies on your workstation.

Branching is convenient for making changes on a repository and having the flexibility to easily revert to earlier states while allowing others to make their own changes on either branch master or their own branches that they have created off of branch master. 

What is the benefit of having a copy of the last known state of the remote stored locally?

Having a copy of the last known state of remote will let you know where you are locally from a history perspective compared to where the remote repository was. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I have only ever collaborated using some form of version control. The best I can say without getting obnoxiously long-winded is that the level of communication necessary would be great and you would have to stay in constant contact with your peers to perform code reviews with one another and see where each of you are on work to avoid crashing the production version of the product.
